{"version":3,"sources":["assets/deep_ty.jpg","assets/memory.png","assets/tm_resume.pdf","Hello/Hello.js","StayConnected/StayConnected.js","Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hello","className","src","Ty","alt","StayConnected","id","href","Pdf","target","Menu","scrollTo","onClick","e","App","scrollToTop","scroll","scroller","duration","delay","smooth","Events","scrollEvent","register","console","log","arguments","Promise","resolve","reject","remove","then","containerId","this","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,oQC0B5BC,G,MAnBD,WACZ,OAEE,yBAAKC,UAAU,qBACb,uBAAGA,UAAU,SAAb,iBACgB,+CADhB,0CAGA,yBAAKC,IAAKC,IAAIF,UAAU,SAASG,IAAI,SAErC,uBAAGH,UAAU,SAAb,+B,yBCUSI,G,MAtBO,WACpB,OACE,yBAAKJ,UAAU,wBAEb,wBAAIK,GAAG,WACH,4BACE,uBAAGC,KAAK,gCAAR,UAEF,4BACE,uBAAGA,KAAMC,IAAKC,OAAO,UAArB,cAEF,4BACE,uBAAGF,KAAK,4CAAR,aAEF,4BACE,uBAAGA,KAAK,kCAAR,eCSGG,G,MAzBF,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACX,OACE,yBAAKV,UAAU,iCAGb,yBAAKA,UAAU,kBACX,uBAAGW,QAAS,SAACC,GAAQF,EAASE,IAAMP,GAAG,SAAvC,SAWA,uBAAGM,QAAS,SAACC,GAAKF,EAASE,IAAKP,GAAG,iBAAnC,sB,OCkEGQ,E,4MAhEbC,YAAc,WACZC,gBAAOD,e,EAETJ,SAAW,SAACE,GACVI,WAASN,SAAUE,EAAEJ,OAAOH,GAAI,CAC9BY,SAAU,IACVC,MAAO,EACPC,OAAQ,oB,kEAhBVC,SAAOC,YAAYC,SAAS,SAAS,WACnCC,QAAQC,IAAI,QAASC,cAGvBL,SAAOC,YAAYC,SAAS,OAAO,WACjCC,QAAQC,IAAI,MAAOC,gB,8CAiBD,IAAIC,SAAQ,SAACC,EAASC,GAExCR,SAAOC,YAAYC,SAAS,OAAO,WACjCK,IACAP,SAAOC,YAAYQ,OAAO,UAG5Bb,WAASN,SAAS,mBAAoB,CACpCO,SAAU,IACVC,MAAO,EACPC,OAAQ,sBAKEW,MAAK,kBACfd,WAASN,SAAS,kCAAmC,CACjDO,SAAU,IACVC,MAAO,EACPC,OAAQ,iBACRY,YAAa,0B,6CAIrBX,SAAOC,YAAYQ,OAAO,SAC1BT,SAAOC,YAAYQ,OAAO,S,+BAG1B,OACI,yBAAK7B,UAAU,WACb,kBAAC,EAAD,CAAMU,SAAWsB,KAAKtB,WACtB,kBAAC,UAAD,CAASuB,KAAK,SACZ,kBAAC,EAAD,OAWF,kBAAC,UAAD,CAASA,KAAK,iBACZ,kBAAC,EAAD,Y,GAtEMC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDmH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.2878f2d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deep_ty.84965554.jpg\";","module.exports = __webpack_public_path__ + \"static/media/memory.3ecd410a.png\";","module.exports = __webpack_public_path__ + \"static/media/tm_resume.c851b25a.pdf\";","import React from 'react';\n// import skull from '../skull.svg'\nimport Ty from '../assets/deep_ty.jpg'\nimport '../App.css'\nimport './Hello.css'\n\n{/* p.hello{My website is }+bold{COMING SOON}{.Until then feel free to reach out or view my resumé.}) */ }\nconst Hello = () => {\n  return (\n    // <div className=\"header page\">\n    <div className=\"header hello-page\">\n      <p className=\"hello\">\n        My website is <strong>Coming SOON</strong>. Until then, feel free to contact me.</p>\n\n      <img src={Ty} className=\"sticky\" alt=\"logo\" />\n      {/* <img src={skull} className=\"App-skull2\" alt=\"logo\" /> */}\n      <p className=\"hello\">\n        Hello,\n        I'm Ty Mondragon!\n            {/* scroll to find out more about me<br></br> */}\n      </p>\n    </div>\n  )\n\n}\n\nexport default Hello","import React from 'react'\nimport Pdf from '../../src/assets/tm_resume.pdf'\nimport './StayConnected.css'\n\nconst StayConnected = () => {\n  return(\n    <div className=\"connected-page hello\">\n    {/* <div className=\"stay-connected page hello\"> */}\n      <ul id=\"navlist\">\n          <li>\n            <a href=\"mailto:hello@tymondragon.com\">Email</a>\n          </li>\n          <li>\n            <a href={Pdf} target=\"_blank\">Resumé</a>\n          </li>\n          <li>\n            <a href=\"https://www.linkedin.com/in/tymondragon/\">LinkedIn</a>\n          </li>\n          <li>\n            <a href=\"https://github.com/tymondragon\">Github</a>\n          </li>\n        </ul>\n    </div>\n  )\n}\n\nexport default StayConnected","import React from 'react'\nimport './Menu.css'\n\nconst Menu = ({scrollTo}) => {\n    return (\n      <div className=\"sticky left transparent hello\">\n        {/* <ul>\n          <li> */}\n        <div className=\"menu-container\">\n            <a onClick={(e) => { scrollTo(e) }} id=\"hello\">Hello</a>\n          {/* </li> */}\n          {/* <li>\n            <a onClick={(e)=>{scrollTo(e)}} id=\"whoami\">Who Am I?</a></li>\n          <li>\n            <a onClick={ (e)=> {scrollTo(e) }} id=\"skills\">Skills</a>\n          </li>\n          <li>\n            <a onClick={(e)=>{scrollTo(e)}} id=\"recentwork\">Recent Work</a>\n          </li> */}\n          {/* <li> */}\n            <a onClick={(e)=>{scrollTo(e)}} id=\"stayconnected\">Stay Connected</a>\n          {/* </li>\n        </ul> */}\n        </div>\n      </div>\n    )\n}\n\nexport default Menu","import React, { Component } from 'react'\nimport './App.css'\nimport Hello from './Hello/Hello'\nimport Skills from './Skills'\nimport RecentWork from './RecentWork/RecentWork'\nimport WhoAmI from './WhoAmI'\nimport StayConnected from './StayConnected/StayConnected'\nimport Menu from './Menu/Menu'\nimport { Element , Events, animateScroll as scroll, scroller } from 'react-scroll'\nclass App extends Component {\n\n  componentDidMount() {\n\n    Events.scrollEvent.register('begin', function() {\n      console.log(\"begin\", arguments);\n    });\n\n    Events.scrollEvent.register('end', function() {\n      console.log(\"end\", arguments);\n    });\n\n  }\n  scrollToTop = () => {\n    scroll.scrollToTop();\n  }\n  scrollTo = (e) => {\n    scroller.scrollTo( e.target.id, {\n      duration: 800,\n      delay: 0,\n      smooth: 'easeInOutQuart'\n    })\n  }\n\n  scrollToWithContainer() {\n\n    let goToContainer = new Promise((resolve, reject) => {\n\n      Events.scrollEvent.register('end', () => {\n        resolve();\n        Events.scrollEvent.remove('end');\n      });\n\n      scroller.scrollTo('scroll-container', {\n        duration: 800,\n        delay: 0,\n        smooth: 'easeInOutQuart'\n      });\n\n    });\n\n    goToContainer.then(() =>\n        scroller.scrollTo('scroll-container-second-element', {\n            duration: 800,\n            delay: 0,\n            smooth: 'easeInOutQuart',\n            containerId: 'scroll-container'\n        }));\n  }\n  componentWillUnmount() {\n    Events.scrollEvent.remove('begin');\n    Events.scrollEvent.remove('end');\n  }\n  render() {\n    return (\n        <div className=\"wrapper\">\n          <Menu scrollTo={ this.scrollTo }/>\n          <Element name=\"hello\">\n            <Hello/>\n          </Element>\n          {/* <Element name=\"whoami\">\n            <WhoAmI/>\n          </Element>\n          <Element name=\"skills\">\n          <Skills />\n          </Element>\n          <Element name=\"recentwork\">\n            <RecentWork/>\n          </Element> */}\n          <Element name=\"stayconnected\">\n            <StayConnected/>\n          </Element>\n        </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}